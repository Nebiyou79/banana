Project Design & Specification Outline
User Roles & Responsibilities

Each system user role should be clearly documented with its tasks and use-cases. According to software requirements best practices, all user roles must be listed and each role‚Äôs responsibilities described in relation to the system
home.adelphi.edu
. For example, roles in this platform include Candidate, Freelancer, Company, Organization, and Admin. Each role interacts with various feature modules (Jobs, Profiles, Applications, Messaging, etc.), and their privileges and workflows should be spelled out.

Candidate: Searches and filters job listings, saves favorites, applies to jobs, and manages their profile or CV (including uploads). They receive and read application responses via the messaging system.

Freelancer: (Independent professional) Similar to Candidate: browses projects or gigs, submits proposals/bids, edits their profile/CV, and negotiates with companies.

Company / Organization: Creates and edits job or project postings, reviews candidate applications, shortlists candidates, and communicates with applicants via messaging. They manage the company/organization profile and view analytics or dashboards for their listings.

Admin: Oversees the entire platform ‚Äì manages user accounts and roles (verifies companies, approves resumes, etc.), configures industries/categories, monitors content, and handles high-level features (e.g. system settings, reports). Admin also sets up role-based permissions and ensures compliance with requirements
home.adelphi.edu
home.adelphi.edu
.

Listing these roles and their feature-specific tasks (e.g. who can post jobs, who can apply, who can message whom) ensures clarity on each user‚Äôs scope and helps coordinate development of separate modules.

Feature Breakdown by Phase

It‚Äôs important to distinguish core Phase 1 features from planned Phase 2 enhancements. In product planning, teams ‚Äúidentify what functionalities are essential and what can wait for future phases‚Äù to prevent scope creep
bwf.com
. Thus, Phase 1 (Web app) should focus on the minimum viable feature set, while Phase 2 (Mobile apps, payments, subscriptions) is scoped as a separate set of features. Each phase can be documented in its own section.

Phase 1 ‚Äì Web Application Features:

Jobs/Opportunities: User roles like Companies/Organizations can create, edit and manage job or project listings. Candidates and Freelancers can browse listings, use advanced search and filters (by skill, location, keyword), sort results, and save favorites.

Profiles & CVs: Every user can build and update a profile. This includes a resume/CV builder or upload (templates for resumes or proposals), skills/experience entries, and profile photos. Users can set privacy/preferences and add portfolio items or certifications.

Applications Tracking: Candidates/Freelancers can apply to listed jobs (possibly auto-apply to matching jobs). Companies/Organizations see a list of applicants per job and can update application status (e.g. reviewed, shortlisted, rejected). This workflow should include application history and status updates.

Messaging & Notifications: An internal messaging system lets users (e.g. candidate ‚Üî company) exchange messages about opportunities. Critical events (new application, message, profile views, etc.) trigger in-app and email notifications. A notification center or badge counter keeps users informed of new activity.

Admin Dashboard & Settings: Admin users access management modules (e.g. user/role management, industry/category creation, verification checks). They also see platform metrics (number of jobs, active users) and can moderate content if needed.

Phase 2 ‚Äì Mobile & Premium Features: (Documented separately for roadmap context)

Mobile App: A mobile-native interface (iOS/Android) with push notifications for messages/applications. The mobile version replicates core job search, profile editing, and messaging features in a responsive design.

Payments & Subscriptions: Introduce monetization: e.g. companies pay per job posting or subscribe to premium plans; freelancers/candidates subscribe for perks (featured profile, extra applications). Backend integration with a payment gateway (Stripe, PayPal) and subscription management must be designed.

Additional Integrations: As examples: social login (OAuth with Google/Facebook), analytics/tracking, or third-party services (e.g. calendar integration for interview scheduling). These can be listed as future capabilities.

This phase-based breakdown keeps the Phase 1 scope focused while still acknowledging the ‚ÄúPhase 2‚Äù roadmap in the documentation
bwf.com
.

Data Models & Backend Logic

The specification should detail the system‚Äôs data model (database schemas) and key backend components for each feature
rst.software
bacancytechnology.com
. In other words, define what collections (in MongoDB) or tables exist and what fields they contain, plus how different modules (controllers/routes) operate. A high-level architecture diagram and module description is recommended: outline frontend, backend, and database responsibilities
bacancytechnology.com
.

User / Profile: Schema for all users (candidates, freelancers, company reps, etc.) including fields like name, email, role, passwordHash, profileDetails (bio, skills), resume (file or text sections), and subscriptionStatus. Backend logic: user registration/login, profile creation/editing, and role-based access control.

Company/Organization Profile: If separate from User, schema holds company name, description, industry/category, location, contact info, verification status, etc. Logic: company registration, profile management, and posting permissions.

Job Posting: Schema with jobId, companyId, title, description, requirements, salary, location, createdAt, and possibly status (open/closed). Backend: routes/controllers for creating/editing/deleting listings by authorized company users, and for retrieving listings (with search/filter queries).

Application: Schema linking candidates to jobs: fields applicationId, jobId, userId, coverLetter, resumeSnapshot, status (applied, reviewed, accepted, rejected), timestamps. Logic: allow candidates to apply (create record), companies to update status and add comments, with history tracking.

Messaging: Schema for in-app messages: messageId, senderId, receiverId, content, sentAt, readFlag. Logic: endpoints for sending messages between users, fetching conversation threads, marking messages as read, and triggering notifications on new messages.

Notifications: (Optional collection) to queue alerts: notificationId, userId, type (e.g. ‚Äúnew_message‚Äù, ‚Äúapplication_update‚Äù), relatedId, createdAt, seen. Logic: generate a notification entry on key events (new job matches, application replies, etc.) and provide API for clients to fetch/clear them.

Payment/Subscription: (Phase 2) Schema for subscriptions/plans: planId, userId, planType, price, startDate, endDate, status. Logic: integrate payment API, handle plan upgrades/downgrades, webhook handlers for payment success/failure.

Each data model should reference others appropriately (e.g. userId in Applications, companyId in Job). In the backend, implement modules (controllers/services) for CRUD operations and business rules per feature (e.g. a ‚ÄúJobs‚Äù controller to handle posting/searching jobs). As one guide notes, a product spec should include a System Architecture section with modules and data flow: e.g. ‚Äúfrontend, backend, database‚Äù components and how data moves between them
bacancytechnology.com
. This helps developers understand how each schema and API fits into the overall system.

Folder and File Structure

Finally, outline a clear project structure for code organization. A typical layout may separate the frontend and backend:
üîê 1. Authentication & Roles
Backend

Models

User.ts

name, email, passwordHash, role (candidate | freelancer | company | org | admin)

verificationStatus, profileCompleted

Controllers

authController.ts

registerUser(req,res)

loginUser(req,res)

logoutUser(req,res)

getCurrentUser(req,res)

Middleware

authMiddleware.ts ‚Üí JWT verification

roleMiddleware.ts ‚Üí restrict access per role

Routes

authRoutes.ts

POST /api/auth/register

POST /api/auth/login

POST /api/auth/logout

GET /api/auth/me

Frontend

Pages

pages/login.tsx

pages/register.tsx

Services

services/authService.ts ‚Üí login, register, logout, getCurrentUser

Context

AuthContext.tsx ‚Üí stores current user + role globally

Components

AuthForm.tsx

RoleRedirect.tsx

Workflow
User registers ‚Üí role assigned ‚Üí login ‚Üí redirect to role-based dashboard.

üë§ 2. Candidate Profile Management
Backend

Models

Extend User.ts:

skills, education, experience, cvUrl, portfolio[]

Controllers

candidateController.ts

getProfile(req,res)

updateProfile(req,res)

uploadCV(req,res)

Routes

candidateRoutes.ts

GET /api/candidate/profile

PUT /api/candidate/profile

POST /api/candidate/cv

Frontend

Pages

pages/dashboard/candidate/profile.tsx

Services

services/candidateService.ts ‚Üí getProfile, updateProfile, uploadCV

Components

ProfileForm.tsx
CVUpload.tsx

üé® 3. Freelancer / Portfolio Management
Backend

Models

Extend User.ts with:

portfolio: [{title, description, mediaUrl}]

Controllers

freelancerController.ts

getPortfolio(req,res)

addPortfolioItem(req,res)

updatePortfolioItem(req,res)

deletePortfolioItem(req,res)

Routes

freelancerRoutes.ts

GET /api/freelancer/portfolio

POST /api/freelancer/portfolio

PUT /api/freelancer/portfolio/:id

DELETE /api/freelancer/portfolio/:id

Frontend

Pages

pages/dashboard/freelancer/portfolio.tsx

Services

services/freelancerService.ts ‚Üí CRUD portfolio

Components

PortfolioList.tsx

PortfolioCard.tsx

PortfolioForm.tsx

üè¢ 4. Company & Organization Management
Backend

Models

Company.js

name, tin, industry, logoUrl, bannerUrl, description, verified

Controllers

companyController.js

createCompany(req,res)

getCompanyProfile(req,res)

updateCompanyProfile(req,res)

Routes

companyRoutes.js

POST /api/companies

GET /api/companies/:id

PUT /api/companies/:id

Frontend

Pages

pages/dashboard/company/profile.tsx

Services

services/companyService.ts

Components

CompanyForm.tsx

CompanyCard.tsx

üíº 5. Job & Tender Management
Backend

Models

Job.ts ‚Üí {title, description, skills, salary, location, createdBy}

Controllers

jobController.ts

createJob (Company/Admin)

getJobs

getJob

updateJob (Company/Admin)

deleteJob (Company/Admin)

Routes

jobRoutes.ts

Frontend

Candidate Pages

pages/dashboard/candidate/jobs.tsx

Company Pages

pages/dashboard/company/jobs.tsx

Admin Pages

pages/dashboard/admin/jobs.tsx

Services

services/jobService.ts

Components

JobList.tsx

JobCard.tsx

JobForm.tsx

üì• 6. Applications & Proposals
Backend

Models

Application.ts ‚Üí {jobId, candidateId, coverLetter, status}

Proposal.ts ‚Üí {tenderId, freelancerId, bidAmount, proposalText, status}

Controllers

applicationController.ts

applyJob(req,res)

getUserApplications(req,res)

getApplicationsForJob(req,res)

proposalController.ts

CRUD proposals

Routes

applicationRoutes.ts

proposalRoutes.ts

Frontend

Candidate Pages

pages/dashboard/candidate/applications.tsx

Freelancer Pages

pages/dashboard/freelancer/proposals.tsx

Services

services/applicationService.ts

services/proposalService.ts

Components

ApplicationList.tsx

ProposalForm.tsx

‚úÖ 7. Verification System (Exams + Office Check)
Backend

Models

Exam.ts ‚Üí {questions: [{question, options[], correctOption}]}

Verification.ts ‚Üí {userId, status: 'Unverified' | 'Partial' | 'Full'}

Controllers

examController.ts

createExam (Admin)

getExams

submitExam (Candidate/Freelancer)

verificationController.ts

updateVerificationStatus (Admin)

Routes

examRoutes.ts

verificationRoutes.ts

Frontend

Candidate Pages

pages/dashboard/candidate/verification.tsx

Admin Pages

pages/dashboard/admin/exams.tsx

Services

services/examService.ts

services/verificationService.ts

Components

ExamForm.tsx

ExamTaking.tsx

VerificationStatus.tsx

üîî 8. Notifications
Backend

Models

Notification.ts ‚Üí {userId, message, read}

Controllers

notificationController.ts

getNotifications(req,res)

markAsRead(req,res)

Routes

notificationRoutes.ts

Frontend

Components

NotificationBell.tsx

NotificationList.tsx

Services

services/notificationService.ts

üì© 9. Messaging & Networking (Phase 2 Expansion)
Backend

Models

Message.ts ‚Üí {senderId, receiverId, content, createdAt, read}

Post.ts ‚Üí {userId, content, mediaUrl, likes, comments}

Controllers

messageController.ts ‚Üí send, fetch threads

postController.ts ‚Üí CRUD posts, likes, comments

Routes

messageRoutes.ts

postRoutes.ts

Frontend

Pages

pages/messages.tsx

pages/network.tsx

Services

services/messageService.ts

services/postService.ts

Components

ChatWindow.tsx

PostCard.tsx

PostForm.tsx

üí≥ 10. Payments & Subscriptions (Phase 2)
Backend

Models

Subscription.ts ‚Üí {userId, plan, startDate, endDate, status}

Payment.ts ‚Üí {userId, amount, gateway, status}

Controllers

paymentController.ts ‚Üí create checkout session, webhook handlers

subscriptionController.ts ‚Üí activate plan, cancel, upgrade

Routes

paymentRoutes.ts

subscriptionRoutes.ts

Frontend

Pages

pages/pricing.tsx

pages/dashboard/admin/payments.tsx

Services

services/paymentService.ts

services/subscriptionService.ts

Components

PricingTable.tsx

CheckoutButton.tsx

üñ•Ô∏è 11. Layout & Navigation
Frontend
Components
Layout.tsx
Sidebar.tsx
Header.tsx
ProtectedRoute.tsx
Shared UI
Button.tsx
Input.tsx
Modal.tsx
üîÑ Example Workflows
Candidate:
Register ‚Üí Login ‚Üí Dashboard ‚Üí Profile (upload CV) ‚Üí Browse Jobs ‚Üí Apply ‚Üí Take Exam ‚Üí Wait for verification ‚Üí Get notifications.
Freelancer:
Register ‚Üí Build portfolio ‚Üí Apply to tenders with proposals ‚Üí Track proposals ‚Üí Messaging with companies.
Company:
Register ‚Üí Verify TIN ‚Üí Create job posts ‚Üí Manage applicants ‚Üí Message shortlisted candidates.
Admin:
Login ‚Üí Manage users ‚Üí Verify profiles/companies ‚Üí Create exams ‚Üí Manage jobs & tenders ‚Üí Moderate posts.
backend/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ db.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ env.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authMiddleware.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ roleMiddleware.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ errorHandler.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Company.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Job.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Application.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Proposal.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Exam.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Verification.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Notification.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Message.ts        (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Post.ts           (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Subscription.ts   (Phase 2)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Payment.ts        (Phase 2)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ candidateController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ freelancerController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ companyController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jobController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ applicationController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ proposalController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ examController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ verificationController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notificationController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adminController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ messageController.ts      (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ postController.ts         (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentController.ts      (Phase 2)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subscriptionController.ts (Phase 2)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ candidateRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ freelancerRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ companyRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jobRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ applicationRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ proposalRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ examRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ verificationRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notificationRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adminRoutes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ messageRoutes.ts         (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ postRoutes.ts            (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentRoutes.ts         (Phase 2)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subscriptionRoutes.ts    (Phase 2)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ token.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fileUpload.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validators.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ app.ts
‚îÇ   ‚îî‚îÄ‚îÄ server.ts
‚îÇ
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ .env
Frontend
frontend/
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx               (Landing Page)
‚îÇ   ‚îú‚îÄ‚îÄ login.tsx
‚îÇ   ‚îú‚îÄ‚îÄ register.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ candidate/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx       (Overview)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jobs.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ applications.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ verification.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ freelancer/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ portfolio.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ company/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jobs.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ org/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jobs.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ index.tsx
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ jobs.tsx
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ candidates.tsx
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ exams.tsx
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ companies.tsx
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ payments.tsx (Phase 2)
‚îÇ
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Layout.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProtectedRoute.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthForm.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RoleRedirect.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ candidate/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProfileForm.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CVUpload.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ApplicationList.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ freelancer/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PortfolioList.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PortfolioCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PortfolioForm.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ company/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CompanyForm.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CompanyCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ApplicantList.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ jobs/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ JobList.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ JobCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ JobForm.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ verification/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ExamForm.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ExamTaking.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ VerificationStatus.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ notifications/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationBell.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationList.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ messaging/ (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChatWindow.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ChatList.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ posts/ (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PostCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PostForm.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ payments/ (Phase 2)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PricingTable.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CheckoutButton.tsx
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ ui/
‚îÇ       ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ       ‚îú‚îÄ‚îÄ Input.tsx
‚îÇ       ‚îú‚îÄ‚îÄ Modal.tsx
‚îÇ       ‚îî‚îÄ‚îÄ Toast.tsx
‚îÇ
‚îú‚îÄ‚îÄ context/
‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.tsx
‚îÇ   ‚îú‚îÄ‚îÄ NotificationContext.tsx
‚îÇ   ‚îî‚îÄ‚îÄ UIContext.tsx
‚îÇ
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts
‚îÇ   ‚îú‚îÄ‚îÄ useJobs.ts
‚îÇ   ‚îú‚îÄ‚îÄ useNotifications.ts
‚îÇ   ‚îî‚îÄ‚îÄ useForm.ts
‚îÇ
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ api.ts
‚îÇ   ‚îú‚îÄ‚îÄ authService.ts
‚îÇ   ‚îú‚îÄ‚îÄ candidateService.ts
‚îÇ   ‚îú‚îÄ‚îÄ freelancerService.ts
‚îÇ   ‚îú‚îÄ‚îÄ companyService.ts
‚îÇ   ‚îú‚îÄ‚îÄ jobService.ts
‚îÇ   ‚îú‚îÄ‚îÄ applicationService.ts
‚îÇ   ‚îú‚îÄ‚îÄ proposalService.ts
‚îÇ   ‚îú‚îÄ‚îÄ examService.ts
‚îÇ   ‚îú‚îÄ‚îÄ verificationService.ts
‚îÇ   ‚îú‚îÄ‚îÄ notificationService.ts
‚îÇ   ‚îú‚îÄ‚îÄ messageService.ts        (Phase 2)
‚îÇ   ‚îú‚îÄ‚îÄ postServ

